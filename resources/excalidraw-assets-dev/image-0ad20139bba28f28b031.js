/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkExcalidraw"] = globalThis["webpackChunkExcalidraw"] || []).push([["image"],{

/***/ "../../data/encode.ts":
/*!****************************!*\
  !*** ../../data/encode.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toByteString\": () => (/* binding */ toByteString),\n/* harmony export */   \"stringToBase64\": () => (/* binding */ stringToBase64),\n/* harmony export */   \"base64ToString\": () => (/* binding */ base64ToString),\n/* harmony export */   \"encode\": () => (/* binding */ encode),\n/* harmony export */   \"decode\": () => (/* binding */ decode)\n/* harmony export */ });\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako */ \"../../../node_modules/pako/index.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n// -----------------------------------------------------------------------------\n// byte (binary) strings\n// -----------------------------------------------------------------------------\n// fast, Buffer-compatible implem\nconst toByteString = (data) => {\n    return new Promise((resolve, reject) => {\n        const blob = typeof data === \"string\"\n            ? new Blob([new TextEncoder().encode(data)])\n            : new Blob([data]);\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            if (!event.target || typeof event.target.result !== \"string\") {\n                return reject(new Error(\"couldn't convert to byte string\"));\n            }\n            resolve(event.target.result);\n        };\n        reader.readAsBinaryString(blob);\n    });\n};\nconst byteStringToArrayBuffer = (byteString) => {\n    const buffer = new ArrayBuffer(byteString.length);\n    const bufferView = new Uint8Array(buffer);\n    for (let i = 0, len = byteString.length; i < len; i++) {\n        bufferView[i] = byteString.charCodeAt(i);\n    }\n    return buffer;\n};\nconst byteStringToString = (byteString) => {\n    return new TextDecoder(\"utf-8\").decode(byteStringToArrayBuffer(byteString));\n};\n// -----------------------------------------------------------------------------\n// base64\n// -----------------------------------------------------------------------------\n/**\n * @param isByteString set to true if already byte string to prevent bloat\n *  due to reencoding\n */\nconst stringToBase64 = (str, isByteString = false) => __awaiter(void 0, void 0, void 0, function* () {\n    return isByteString ? btoa(str) : btoa(yield toByteString(str));\n});\n// async to align with stringToBase64\nconst base64ToString = (base64, isByteString = false) => __awaiter(void 0, void 0, void 0, function* () {\n    return isByteString ? atob(base64) : byteStringToString(atob(base64));\n});\n/**\n * Encodes (and potentially compresses via zlib) text to byte string\n */\nconst encode = ({ text, compress, }) => __awaiter(void 0, void 0, void 0, function* () {\n    let deflated;\n    if (compress !== false) {\n        try {\n            deflated = yield toByteString((0,pako__WEBPACK_IMPORTED_MODULE_0__.deflate)(text));\n        }\n        catch (error) {\n            console.error(\"encode: cannot deflate\", error);\n        }\n    }\n    return {\n        version: \"1\",\n        encoding: \"bstring\",\n        compressed: !!deflated,\n        encoded: deflated || (yield toByteString(text)),\n    };\n});\nconst decode = (data) => __awaiter(void 0, void 0, void 0, function* () {\n    let decoded;\n    switch (data.encoding) {\n        case \"bstring\":\n            // if compressed, do not double decode the bstring\n            decoded = data.compressed\n                ? data.encoded\n                : yield byteStringToString(data.encoded);\n            break;\n        default:\n            throw new Error(`decode: unknown encoding \"${data.encoding}\"`);\n    }\n    if (data.compressed) {\n        return (0,pako__WEBPACK_IMPORTED_MODULE_0__.inflate)(new Uint8Array(byteStringToArrayBuffer(decoded)), {\n            to: \"string\",\n        });\n    }\n    return decoded;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../data/encode.ts\n");

/***/ }),

/***/ "../../data/image.ts":
/*!***************************!*\
  !*** ../../data/image.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getTEXtChunk\": () => (/* binding */ getTEXtChunk),\n/* harmony export */   \"encodePngMetadata\": () => (/* binding */ encodePngMetadata),\n/* harmony export */   \"decodePngMetadata\": () => (/* binding */ decodePngMetadata),\n/* harmony export */   \"encodeSvgMetadata\": () => (/* binding */ encodeSvgMetadata),\n/* harmony export */   \"decodeSvgMetadata\": () => (/* binding */ decodeSvgMetadata)\n/* harmony export */ });\n/* harmony import */ var png_chunks_extract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! png-chunks-extract */ \"../../../node_modules/png-chunks-extract/index.js\");\n/* harmony import */ var png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(png_chunks_extract__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var png_chunk_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! png-chunk-text */ \"../../../node_modules/png-chunk-text/index.js\");\n/* harmony import */ var png_chunks_encode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! png-chunks-encode */ \"../../../node_modules/png-chunks-encode/index.js\");\n/* harmony import */ var png_chunks_encode__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(png_chunks_encode__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _encode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encode */ \"../../data/encode.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ \"../../constants.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n// -----------------------------------------------------------------------------\n// PNG\n// -----------------------------------------------------------------------------\nconst blobToArrayBuffer = (blob) => {\n    if (\"arrayBuffer\" in blob) {\n        return blob.arrayBuffer();\n    }\n    // Safari\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            var _a;\n            if (!((_a = event.target) === null || _a === void 0 ? void 0 : _a.result)) {\n                return reject(new Error(\"couldn't convert blob to ArrayBuffer\"));\n            }\n            resolve(event.target.result);\n        };\n        reader.readAsArrayBuffer(blob);\n    });\n};\nconst getTEXtChunk = (blob) => __awaiter(void 0, void 0, void 0, function* () {\n    const chunks = png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default()(new Uint8Array(yield blobToArrayBuffer(blob)));\n    const metadataChunk = chunks.find((chunk) => chunk.name === \"tEXt\");\n    if (metadataChunk) {\n        return png_chunk_text__WEBPACK_IMPORTED_MODULE_1__.decode(metadataChunk.data);\n    }\n    return null;\n});\nconst encodePngMetadata = ({ blob, metadata, }) => __awaiter(void 0, void 0, void 0, function* () {\n    const chunks = png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default()(new Uint8Array(yield blobToArrayBuffer(blob)));\n    const metadataChunk = png_chunk_text__WEBPACK_IMPORTED_MODULE_1__.encode(_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw, JSON.stringify(yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.encode)({\n        text: metadata,\n        compress: true,\n    })));\n    // insert metadata before last chunk (iEND)\n    chunks.splice(-1, 0, metadataChunk);\n    return new Blob([png_chunks_encode__WEBPACK_IMPORTED_MODULE_2___default()(chunks)], { type: \"image/png\" });\n});\nconst decodePngMetadata = (blob) => __awaiter(void 0, void 0, void 0, function* () {\n    const metadata = yield getTEXtChunk(blob);\n    if ((metadata === null || metadata === void 0 ? void 0 : metadata.keyword) === _constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw) {\n        try {\n            const encodedData = JSON.parse(metadata.text);\n            if (!(\"encoded\" in encodedData)) {\n                // legacy, un-encoded scene JSON\n                if (\"type\" in encodedData &&\n                    encodedData.type === _constants__WEBPACK_IMPORTED_MODULE_4__.EXPORT_DATA_TYPES.excalidraw) {\n                    return metadata.text;\n                }\n                throw new Error(\"FAILED\");\n            }\n            return yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.decode)(encodedData);\n        }\n        catch (error) {\n            console.error(error);\n            throw new Error(\"FAILED\");\n        }\n    }\n    throw new Error(\"INVALID\");\n});\n// -----------------------------------------------------------------------------\n// SVG\n// -----------------------------------------------------------------------------\nconst encodeSvgMetadata = ({ text }) => __awaiter(void 0, void 0, void 0, function* () {\n    const base64 = yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.stringToBase64)(JSON.stringify(yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.encode)({ text })), true /* is already byte string */);\n    let metadata = \"\";\n    metadata += `<!-- payload-type:${_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw} -->`;\n    metadata += `<!-- payload-version:2 -->`;\n    metadata += \"<!-- payload-start -->\";\n    metadata += base64;\n    metadata += \"<!-- payload-end -->\";\n    return metadata;\n});\nconst decodeSvgMetadata = ({ svg }) => __awaiter(void 0, void 0, void 0, function* () {\n    if (svg.includes(`payload-type:${_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw}`)) {\n        const match = svg.match(/<!-- payload-start -->(.+?)<!-- payload-end -->/);\n        if (!match) {\n            throw new Error(\"INVALID\");\n        }\n        const versionMatch = svg.match(/<!-- payload-version:(\\d+) -->/);\n        const version = (versionMatch === null || versionMatch === void 0 ? void 0 : versionMatch[1]) || \"1\";\n        const isByteString = version !== \"1\";\n        try {\n            const json = yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.base64ToString)(match[1], isByteString);\n            const encodedData = JSON.parse(json);\n            if (!(\"encoded\" in encodedData)) {\n                // legacy, un-encoded scene JSON\n                if (\"type\" in encodedData &&\n                    encodedData.type === _constants__WEBPACK_IMPORTED_MODULE_4__.EXPORT_DATA_TYPES.excalidraw) {\n                    return json;\n                }\n                throw new Error(\"FAILED\");\n            }\n            return yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.decode)(encodedData);\n        }\n        catch (error) {\n            console.error(error);\n            throw new Error(\"FAILED\");\n        }\n    }\n    throw new Error(\"INVALID\");\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../data/image.ts\n");

/***/ })

}]);